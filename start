#!/bin/bash

if [ "${BASH_SOURCE-}" = "$0" ]; then
    echo "You must source this script: \$ source $0" >&2
    exit 33
fi


START_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

source $START_DIR/settings.sh

chmod u+x -R $START_DIR

function defaultsettings {
    cp -f $START_DIR/defaultsettings.sh $START_DIR/settings.sh
    echo "settings.sh replaced by defaultsettings.sh"
}

function testgame {
    local platform=$1
    if [ $# -ne 1 ] ; then
        echo "No parameters provided, assuming: '$TARGETSYSTEM'."
        platform=$TARGETSYSTEM
    fi
    if [ $platform == "linux" ] ; then
        cd $TESTBUILDFOLDER/$TESTBUILDNAME-$platform
        ./OneLife
        cd -
    elif [ $platform == "windows" ] ; then
        cd $TESTBUILDFOLDER/$TESTBUILDNAME-$platform
        ./OneLife.exe
        cd -
    fi
}
function testserver {
    local platform=$1
    if [ $# -ne 1 ] ; then
        echo "No parameters provided, assuming: '$TARGETSYSTEM'."
        platform = $TARGETSYSTEM
    fi
    if [ $platform == "linux" ] ; then
        cd $TESTBUILDFOLDER/$TESTBUILDNAME-$platform
        ./OneLifeServer
        cd -
    elif [ $platform == "windows" ] ; then
        cd $TESTBUILDFOLDER/$TESTBUILDNAME-$platform
        ./OneLifeServer.exe
        cd -
    fi
}
function runtest {
    $START_DIR/scripts/makeTestBuild.sh $TARGETSYSTEM
    testgame $TARGETSYSTEM & testserver $TARGETSYSTEM
}
function makegame {
    ( cd $GAMEDIR/gameSource ; make )
}
function makeeditor {
    ( cd $GAMEDIR/gameSource ; ./makeEditor.sh )
}
function makeserver {
    ( cd $GAMEDIR/server ; make )
}
function makeall {
    makegame
    makeeditor
    makeserver
}

function eolfix {
    echo $GAMEDIR

    find $MINORDIR -name "configure" -type f -exec dos2unix {} +
    find $GAMEDIR -name "configure" -type f -exec dos2unix {} +
    
    find $MINORDIR -name "Makefile*" -type f -exec dos2unix {} +
    find $GAMEDIR -name "Makefile*" -type f -exec dos2unix {} +
    
    find $MINORDIR -name "*.sh" -type f -exec dos2unix {} +
    find $GAMEDIR -name "*.sh" -type f -exec dos2unix {} +
    find $DATADIR -name "*.sh" -type f -exec dos2unix {} +
}

function gitfix {
    sudo ifconfig eth0 mtu 1350
}


function xla {
    # Update TIMESTAMP everytime we want to run a script
    export TIMESTAMP=$(date '+(%F,%H%M)')
    if [ $# -lt 1 ] ; then
        echo "Usage: xla [SCRIPT_NAME]"
    else
        if $(find $START_DIR/scripts -iname "$1.sh" -exec false {} +) ; then
            echo "No script '$1' found."
        elif [ $(find $START_DIR/scripts -iname "$1.sh" | wc -l) -ne 1 ] ; then
            echo "More than one script named '$1'."
        else
            find $START_DIR/scripts -iname "$1.sh" -exec echo -e "Running: {}\n" \; -exec {} ${@:2} \;
        fi
    fi
}

function x-cat {
    find $START_DIR/scripts -iname "$1.sh" -exec cat {} \;
    echo
}

function x-cd {
    if [ $# -ne 1 ] ; then
        echo "Parameters: assistant, scripts, minorgems, onelife or onelifedata"
        return
    fi
    if [ $1 == "assistant" ] ; then
        cd $ASSISTANTDIR
    elif [ $1 == "scripts" ] ; then
        cd $ASSISTANTDIR/scripts
    elif [ $1 == "minorgems" ] ; then
        cd $MINORDIR
    elif [ $1 == "onelife" ] ; then
        cd $GAMEDIR
    elif [ $1 == "onelifedata" ] ; then
        cd $DATADIR
    fi
}

function x-platform {
    cd $GAMEDIR
    ./configure
    cd $GAMEDIR/server
    ./configure
    cd $START_DIR
}

function x-reconfigure {
    local setting
    local old_value
    local prompt
    local list_item
    local list="TARGETSYSTEM RELEASENAME REMOTEGAME_USER REMOTEGAME_BRANCH REMOTEMINOR_USER REMOTEMINOR_BRANCH REMOTEDATA_USER REMOTEDATA_BRANCH"
  
    for list_item in $list; do
        setting="export $list_item="
        old_value=$(grep "$setting" $START_DIR/settings.sh | sed 's/.*=//')
        read -e -p "$list_item= " -i "$old_value" prompt
        sed -i "/$setting/ s/=.*/=$prompt/" $START_DIR/settings.sh
    done
    
    source $START_DIR/settings.sh
}

function x-reload {
    source $START_DIR/start
}


echo
echo -e "The following functions can be used:\n"
#declare -F | awk '{print $NF}' | sort | egrep -v "^_"
cat $START_DIR/info-commands.txt

echo
echo -e "The following scripts are avaliable:\n"
find $START_DIR/scripts -type f -exec basename -s .sh {} \;

echo
echo "You can use the xla function to run scripts above."
echo
